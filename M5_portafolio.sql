-- MySQL Script generated by MySQL Workbench
-- Mon Sep  8 15:52:51 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Hilos`: La tabla Hilos almacena la información de cada hilo en inventario. 
-- Tiene un identificador único autoincremental (id_hilo), el nombre del color y un código de color que no se puede repetir, además de la cantidad disponible, 
-- que no puede ser negativa, y la fecha de ingreso al sistema. De esta forma se garantiza que cada hilo quede registrado de manera única y con control sobre su stock.
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Hilos` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Hilos` (
  `id_hilo` INT NOT NULL AUTO_INCREMENT,
  `color` VARCHAR(45) NOT NULL,
  `cantidad_actual` INT NOT NULL,
  `codigo_color` VARCHAR(45) NOT NULL,
  `fecha_ingreso` DATETIME NOT NULL,
  PRIMARY KEY (`id_hilo`),
  UNIQUE (codigo_color),
  CHECK (cantidad_actual >= 0)        
)ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Proveedores`: La tabla Proveedores guarda la información de las empresas que suministran hilos. Cada proveedor tiene un identificador único autoincremental (id_proveedores), 
-- junto con su nombre, dirección, teléfono y correo de contacto, todos obligatorios. El campo nombre está definido como único para evitar que se registren dos proveedores con el mismo nombre
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Proveedores` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Proveedores` (
  `id_proveedores` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(150) NOT NULL,
  `direccion` VARCHAR(250) NOT NULL,
  `telefono` VARCHAR(45) NOT NULL,
  `correo_contacto` VARCHAR(150) NOT NULL,
  PRIMARY KEY (`id_proveedores`),
  UNIQUE INDEX `nombre_UNIQUE` (`nombre` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Clientes`: La tabla Clientes almacena los datos de los clientes que realizan compras. Cada cliente tiene un identificador único autoincremental (id_cliente) como clave primaria. 
-- Los campos de nombre, dirección y teléfono son opcionales, mientras que el correo electrónico puede registrarse o no, pero en caso de existir debe ser único para evitar duplicados.
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Clientes` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Clientes` (
  `id_cliente` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(150) NULL,
  `direccion` VARCHAR(250) NULL,
  `telefono` VARCHAR(45) NULL,
  `correo` VARCHAR(100) NULL UNIQUE,
  PRIMARY KEY (`id_cliente`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Ventas`: La tabla Ventas registra cada operación de compra realizada por los clientes. 
-- Cada venta tiene un identificador único autoincremental (id_ventas), la fecha y hora en que ocurrió (fecha_venta) y la referencia al cliente que la realizó (Clientes_id_cliente). 
-- La clave primaria se compone de id_ventas y Clientes_id_cliente, y se establece una clave foránea hacia la tabla Clientes para mantener la integridad de los datos
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Ventas` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Ventas` (
  `id_ventas` INT NOT NULL AUTO_INCREMENT,
  `fecha_venta` DATETIME NOT NULL,
  `Clientes_id_cliente` INT NOT NULL,
  PRIMARY KEY (`id_ventas`, `Clientes_id_cliente`),
  INDEX `fk_Compras_Clientes1_idx` (`Clientes_id_cliente` ASC) VISIBLE,
  CONSTRAINT `fk_Compras_Clientes1`
    FOREIGN KEY (`Clientes_id_cliente`)
    REFERENCES `mydb`.`Clientes` (`id_cliente`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Proveedores_has_Hilos`: La tabla Proveedores_has_Hilos es una tabla puente que representa la relación muchos a muchos entre los proveedores y los hilos. 
-- Cada fila asocia un proveedor con un hilo específico, y su clave primaria está compuesta por ambas columnas (Proveedores_id_proveedores, Hilos_id_hilo) para garantizar que no se repita la misma combinación. 
-- Incluye claves foráneas hacia las tablas Proveedores e Hilos, con la opción ON DELETE CASCADE para que, si se elimina un proveedor o un hilo, se borren automáticamente sus asociaciones en esta tabla.
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Proveedores_has_Hilos` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Proveedores_has_Hilos` (
  `Proveedores_id_proveedores` INT NOT NULL,
  `Hilos_id_hilo` INT NOT NULL,
  PRIMARY KEY (`Proveedores_id_proveedores`, `Hilos_id_hilo`),
  INDEX `fk_Proveedores_has_Hilos_Hilos1_idx` (`Hilos_id_hilo` ASC) VISIBLE,
  INDEX `fk_Proveedores_has_Hilos_Proveedores_idx` (`Proveedores_id_proveedores` ASC) VISIBLE,
  CONSTRAINT `fk_Proveedores_has_Hilos_Proveedores`
    FOREIGN KEY (`Proveedores_id_proveedores`)
    REFERENCES `mydb`.`Proveedores` (`id_proveedores`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Proveedores_has_Hilos_Hilos1`
    FOREIGN KEY (`Hilos_id_hilo`)
    REFERENCES `mydb`.`Hilos` (`id_hilo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Ventas_has_Hilos`: La tabla Ventas_has_Hilos almacena el detalle de cada venta, indicando qué hilos se vendieron y en qué cantidad. Su clave primaria es compuesta (Ventas_id_ventas, Hilos_id_hilo)
-- lo que garantiza que en una venta no se repita el mismo hilo dos veces. El campo Cantidad es obligatorio y tiene una restricción CHECK que asegura que siempre sea mayor que cero. 
-- Además, incluye claves foráneas hacia las tablas Ventas e Hilos, ambas con ON DELETE CASCADE, de modo que si se elimina una venta o un hilo, sus registros relacionados en esta tabla también se 
-- eliminan automáticamente.
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Ventas_has_Hilos` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Ventas_has_Hilos` (
  `Ventas_id_ventas` INT NOT NULL,
  `Cantidad` INT NOT NULL,
  `Hilos_id_hilo` INT NOT NULL,
  CONSTRAINT chk_cantidad CHECK (`Cantidad` > 0),
  PRIMARY KEY (`Ventas_id_ventas`, `Hilos_id_hilo`),
  INDEX `fk_Ventas_has_Hilos_Hilos1_idx` (`Hilos_id_hilo` ASC) VISIBLE,
  INDEX `fk_Ventas_has_Hilos_Ventas1_idx` (`Ventas_id_ventas` ASC) VISIBLE,
  CONSTRAINT `fk_Ventas_has_Hilos_Ventas1`
    FOREIGN KEY (`Ventas_id_ventas`)
    REFERENCES `mydb`.`Ventas` (`id_ventas`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Ventas_has_Hilos_Hilos1`
    FOREIGN KEY (`Hilos_id_hilo`)
    REFERENCES `mydb`.`Hilos` (`id_hilo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- Poblar las tablas 
INSERT INTO Clientes (nombre, direccion, telefono, correo)
VALUES
('Juan Pérez', 'Av. Siempre Viva 123', '555-1234', 'juan@example.com'),
('María López', 'Calle Luna 45', '555-2345', 'maria@example.com'),
('Pedro Ramírez', 'Calle Sol 89', '555-3456', 'pedro@example.com'),
('Laura Gómez', 'Av. Central 56', '555-4567', 'laura@example.com'),
('Andrés Díaz', 'Calle Norte 77', '555-5678', 'andres@example.com');

INSERT INTO Proveedores (nombre, direccion, telefono, correo_contacto)
VALUES
('Textiles SA', 'Zona Industrial 12', '555-1111', 'contacto@textiles.com'),
('Hilos Finos', 'Av. Comercio 45', '555-2222', 'ventas@hilosfinos.com'),
('Industria Lana', 'Calle Sur 87', '555-3333', 'info@lanas.com');

INSERT INTO Hilos (color, cantidad_actual, codigo_color, fecha_ingreso)
VALUES
('Rojo', 120, 'R001', NOW()),
('Azul', 200, 'A002', NOW()),
('Verde', 150, 'V003', NOW()),
('Amarillo', 80, 'Y004', NOW()),
('Negro', 300, 'N005', NOW()),
('Blanco', 250, 'B006', NOW()),
('Naranja', 90, 'O007', NOW()),
('Rosa', 110, 'P008', NOW()),
('Morado', 130, 'M009', NOW()),
('Gris', 170, 'G010', NOW()),
('Café', 140, 'C011', NOW()),
('Turquesa', 95, 'T012', NOW());

-- POBLAR Proveedores_has_Hilos
INSERT INTO Proveedores_has_Hilos (Proveedores_id_proveedores, Hilos_id_hilo)
VALUES
-- Proveedor 1 (Textiles SA) 
(1, 1),  -- Rojo
(1, 2),  -- Azul
(1, 3),  -- Verde
(1, 4),  -- Amarillo

-- Proveedor 2 (Hilos Finos)
(2, 5),  -- Negro
(2, 6),  -- Blanco
(2, 7),  -- Naranja
(2, 8),  -- Rosa

-- Proveedor 3 (Industria Lana) 
(3, 9),  -- Morado
(3, 10), -- Gris
(3, 11), -- Café
(3, 12); -- Turquesa

-- POBLAR VENTAS
INSERT INTO Ventas (fecha_venta, Clientes_id_cliente)
VALUES
('2025-03-01 10:30:00', 1), -- Juan Pérez
('2025-03-02 15:45:00', 2), -- María López
('2025-03-03 09:20:00', 3), -- Pedro Ramírez
('2025-03-04 18:10:00', 4), -- Laura Gómez
('2025-03-05 11:05:00', 5), -- Andrés Díaz
('2025-03-06 16:00:00', 1), -- otra compra de Juan Pérez
('2025-03-07 14:30:00', 2); -- otra compra de María López

-- POBLAR VENTAS_HAS_HILOS 
INSERT INTO Ventas_has_Hilos (Ventas_id_ventas, Cantidad, Hilos_id_hilo)
VALUES
(1, 3, 1),   
(1, 2, 2),   
(2, 1, 3),
(2, 5, 4),
(2, 2, 5),
(4, 2, 7),
(4, 3, 8),
(4, 1, 9),
(4, 2, 10),
(5, 5, 11),
(5, 3, 12),
(6, 2, 2),
(6, 4, 5),
(6, 1, 8),
(7, 6, 4);

-- 2) Desarrollar consultas SQL para obtener información específica de las tablas 
-- Hilos comprados por el cliente "Juan Pérez"
SELECT DISTINCT
  h.id_hilo,
  h.color
FROM Clientes c
JOIN Ventas v
  ON v.Clientes_id_cliente = c.id_cliente
JOIN Ventas_has_Hilos vh
  ON vh.Ventas_id_ventas = v.id_ventas
JOIN Hilos h
  ON h.id_hilo = vh.Hilos_id_hilo
WHERE c.nombre = 'Juan Pérez'
ORDER BY h.id_hilo;

-- Cantidad de ventas realizadas por cada cliente
SELECT
  c.id_cliente,
  c.nombre,
  COUNT(v.id_ventas) AS total_ventas
FROM Clientes c
LEFT JOIN Ventas v
  ON v.Clientes_id_cliente = c.id_cliente
GROUP BY c.id_cliente, c.nombre
ORDER BY total_ventas DESC, c.nombre ASC;

-- Proveedores que suministran el hilo de color "Rojo"
SELECT DISTINCT
  p.id_proveedores,
  p.nombre AS proveedor,
  h.id_hilo,
  h.color
FROM Proveedores p
JOIN Proveedores_has_Hilos ph
  ON ph.Proveedores_id_proveedores = p.id_proveedores
JOIN Hilos h
  ON h.id_hilo = ph.Hilos_id_hilo
WHERE h.color = 'Rojo'
ORDER BY p.nombre, h.id_hilo;

-- Cantidad total vendida por cada hilo (todas las ventas)
SELECT
  h.id_hilo,
  h.color,
  SUM(vh.Cantidad) AS cantidad_total_vendida
FROM Ventas_has_Hilos vh
JOIN Hilos h
  ON h.id_hilo = vh.Hilos_id_hilo
GROUP BY h.id_hilo, h.color
ORDER BY cantidad_total_vendida DESC, h.id_hilo;

-- Ventas que contienen más de 3 tipos distintos de hilos
SELECT
  v.id_ventas,
  v.fecha_venta,
  c.nombre AS cliente,
  COUNT(DISTINCT vh.Hilos_id_hilo) AS tipos_de_hilos
FROM Ventas v
JOIN Clientes c
  ON c.id_cliente = v.Clientes_id_cliente
JOIN Ventas_has_Hilos vh
  ON vh.Ventas_id_ventas = v.id_ventas
GROUP BY v.id_ventas, v.fecha_venta, c.nombre
HAVING COUNT(DISTINCT vh.Hilos_id_hilo) > 3
ORDER BY v.fecha_venta, v.id_ventas;

-- Utilizar lenguaje de manipulación de datos (DML) para la modificación de los datos existentes en una base de datos dando solución a un problema planteado.
-- INSERT en la tabla Clientes: Agregar un nuevo cliente
INSERT INTO Clientes (nombre, direccion, telefono, correo)
VALUES ('Carlos Mendoza', 'Av. Libertad 202', '555-6789', 'carlos@example.com');

-- UPDATE en la tabla Ventas: Cambiar la fecha de una venta 
UPDATE Ventas
SET fecha_venta = '2025-03-10 15:30:00'
WHERE id_ventas = 3;

-- DELETE en la tabla Hilos: Eliminar un hilo que ya no se usa 
DELETE FROM Hilos
WHERE id_hilo = 12;


-- 4) Implementar estructuras de datos relacionales utilizando lenguaje de definición de datos (DDL) a partir de un modelo de datos para la creación y mantención de las definiciones de los objetos de una base de datos.
-- ALTER TABLE: Agregar una columna 'email_alternativo' a la tabla Clientes
ALTER TABLE Clientes
ADD COLUMN email_alternativo VARCHAR(150);

-- DROP TABLE: 
-- Eliminar completamente la tabla Proveedores_has_Hilos
DROP TABLE Proveedores;

-- TRUNCATE TABLE
TRUNCATE TABLE Hilos;
